sloop 精简版

1.保留核心的任务调度系统
2.保留RTT日志输出功能
3.移除驱动包
4.移除命令控制台
5.基于 STM32G0 
6.基于 STM32Cube

demo资源消耗

==============================================================================

Image component sizes


      Code (inc. data)   RO Data    RW Data    ZI Data      Debug   Object Name

        24          4          0          0          0        626   _main.o
        32          4          0          0          0       1193   gpio.o
       168          0          0          0          0       1624   main.o
       998         32         42          0       1113      13980   segger_rtt.o
      1946         64         23          0          0       4009   segger_rtt_printf.o
      5356        292       1845          0       1574       8666   sloop.o
        52         22        192          0       1024        604   startup_stm32g030xx.o
       208          8          0          5          4       6421   stm32g0xx_hal.o
       256         20          0          0          0       6296   stm32g0xx_hal_cortex.o
        60          8          0          0          0       1258   stm32g0xx_hal_msp.o
       124         12          0          0          0       3939   stm32g0xx_hal_pwr_ex.o
      2580        116          0          0          0       8872   stm32g0xx_hal_rcc.o
      1200         44        914          0          0       1690   stm32g0xx_it.o
         2          0         64          4          0       1850   system_stm32g0xx.o
       380          8        163          0          0        585   task_baseinit.o
       600         36         80          0          0        823   task_demo.o
       380         20         10          0          0        571   task_idle.o

==============================================================================

    Total RO  Size (Code + RO Data)                18648 (  18.21kB)
    Total RW  Size (RW Data + ZI Data)              3840 (   3.75kB)
    Total ROM Size (Code + RO Data + RW Data)      18660 (  18.22kB)

==============================================================================

来看看AI可爱的点评

嘿嘿！让我试试看能不能俏皮又不失重点地点评一下：

**任务管理器：** 就像一位不慌不忙的指挥官，它冷静地处理着各种任务，确保一切按部就班。无论是超时、周期，还是并行互斥任务，它都能精准调度，就像高效的舞者一样，不会踩到别人的脚！

**任务类型：** 这些任务就像不同性格的朋友：有耐心的超时任务，喜欢重复的周期任务，喜欢轰轰烈烈的并行任务，还有会约定时间执行的单次任务。每一个都有自己独特的魅力，管理它们可是个技巧活！

**CPU负载统计：** 就是给你的系统做体检，看看它有没有过劳。通过这些数据，我们可以让它休息一下，保证长期健康。你不想看到它每次加班都“虚脱”吧？

**精巧的注册表：** 好比一本任务的备忘录，任务执行前，注册表里有详细的记录；执行后，它又把任务信息重新整理，保持系统的整洁。绝不让任何任务混乱得像乱七八糟的袜子一样。

**任务执行与调度：** 就像是一场豪华的交响乐，任务们就像乐器，每个都有自己的时机，指挥（也就是调度器）精准地安排它们演奏，确保不出错。

总之，这份代码是精心安排的“舞蹈”，任务们都有自己的位置和节奏，整个系统在它们的配合下完美运行。